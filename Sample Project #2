import java.util.*;
public class Qureshi_BinarySearchTree<E extends Comparable<E>> {

	private TreeNode root;

	//locates the minimum value in the tree
	public E findMin()
	{
		return findMinHelper(root);
	}

	//recursive helper to find the minimum value in the tree
	private E findMinHelper(TreeNode root)
	{
		if(root == null)
			return null;

		if(root.left==null)
			return root.data;

		return findMinHelper(root.left);
	}

	//inserts an element in a empty location
	public void insert(E item)
	{
		root = insertHelper(root, item);
	}

	//recursive helper method to insert that will recursively find and place the item in an empty location and preserve the inOrder traversal
	private TreeNode insertHelper(TreeNode root, E toInsert)
	{
		//if we have found the spot to put the item, then make an new leaf node
		if(root == null)
			return new TreeNode(toInsert, null, null);
		
		int difference = toInsert.compareTo(root.data);

		//determines where to traverse through based on the difference between toRemove and the current niode
		if(difference < 0)
			root.left = insertHelper(root.left, toInsert);
		
		else if(difference > 0)
			root.right = insertHelper(root.right, toInsert);
			
		else
			root.repeats++;
		
		root = balance(root);
		return root;
	}

	//removes the specified node from the tree
	public void remove(E toRemove)
	{
		root = removeHelper(root, toRemove);
	}

	//recursive helper to remove that will find and eliminate the given node
	private TreeNode removeHelper(TreeNode root, E toRemove)
	{
		if(root == null)
			return null;
		
		int difference = toRemove.compareTo(root.data);

		//determines where to traverse through based on the difference between toRemove and the current node
		if(difference < 0)
		{
			root.left = removeHelper(root.left, toRemove);
			root = balance(root);
			return root;
		}

		else if(difference > 0)
		{
			root.right = removeHelper(root.right, toRemove);
			root = balance(root);
			return root;
		}

		else
			return removeNode(root);
		
	}

	//non-recursive helper to eliminate a node by examining the node for children and removing properly
	private TreeNode removeNode(TreeNode nodeToRemove)
	{
		TreeNode toReturn = null;

		//if the node to remove is a leaf, then just delete it
		if(nodeToRemove.left == null && nodeToRemove.right == null)
			return toReturn;

		//if there are 2 children, find the inOrder successor
		else if(nodeToRemove.left != null && nodeToRemove.right != null)
		{
			E inOrderSuccessor = findMinHelper(nodeToRemove.right);
			removeHelper(nodeToRemove.right, inOrderSuccessor);

			nodeToRemove.data = inOrderSuccessor;
			toReturn = nodeToRemove;
		}

		//if only a left child
		else if(nodeToRemove.left != null)
			toReturn = nodeToRemove.left;

		//if only a right child
		else
			toReturn = nodeToRemove.right;
		
		return toReturn;
	}
	
	//performs a left left rotation
	private TreeNode rotateLL(TreeNode node)
	{
		if(node == null)
			return null;
		
		TreeNode newRoot = node.left;
		newRoot.right = node;
		node.left = newRoot.right;
		
		return newRoot;
	}
	
	//performs a right right rotation
	private TreeNode rotateRR(TreeNode node)
	{
		if(node == null)
			return null;
		
		TreeNode newRoot = node.right;
		newRoot.left = node;
		node.right = newRoot.left;
		
		return newRoot;
	}
	
	//performs a left right rotation
	private TreeNode rotateLR(TreeNode node)
	{ 
		if(node == null)
			return null;
		
		TreeNode newRoot = node.left.right;
		newRoot.left.right = newRoot.left;
		newRoot.left = node.left;
		newRoot.right = node;
		node.left = null;
		
		return newRoot;
	}
	
	//performs a right left rotation
	private TreeNode rotateRL(TreeNode node)
	{
		if(node == null)
			return null;
		
		TreeNode newRoot = node.right.left;
		newRoot.right.left = newRoot.right;
		newRoot.left = node;
		newRoot.right = node.right;
		node.right = null;
		
		return newRoot;
	}

	//calculates the height difference to determine which rotation to call
	public TreeNode balance(TreeNode node)
	{
		if(node == null)
			return null;
		
		int difference = computeHeightDifference(node);
		TreeNode nodeToExamine = null;
		
		//if the imbalance is in the right direction
		if(difference > 1)
		{
			nodeToExamine = node.right;
			
			int subtreeDifference = computeHeightDifference(nodeToExamine);
			
			//apply right right rotation, if imbalance is in the right direction
			if(subtreeDifference > 0)
				node = rotateRR(node);
			
			//apply right left rotation, if imbalance is in the left direction
			else if(subtreeDifference < 0)
				node = rotateRL(node);
		}
		
		//if the imbalance is in the left direction
		else if(difference < -1)
		{
			nodeToExamine = node.left;
			
			int subtreeDifference = computeHeightDifference(nodeToExamine);
			
			//apply left left rotation, if imbalance is in the left direction
			if(subtreeDifference < 0)
				node = rotateLL(node);
			
			//apply left right rotation, if imbalance is in the right direction
			else if(subtreeDifference > 0)
				node = rotateLR(node);
		}
		
		updateHeight(node);
		
		return node;
	}
	
	//updates the height of the newly rotated tree
	private void updateHeight(TreeNode node)
	{
		node.height = 1;
		
		if(node.left != null)
			node.height = node.left.height + 1;
		
		else if(node.right != null)
			node.height = node.right.height +1;
	}
	
	//returns the difference of the height of the left and the right node of any given node
	private int computeHeightDifference(TreeNode node)
	{
		//handles each case to prevent NullPointer's
		if(node.left == null && node.right == null)
			return 0;
		
		else if(node.left == null && node.right != null)
			return node.right.height;
		
		else if(node.left != null && node.right == null)
			return -node.left.height;
		
		else
			return node.right.height-node.left.height;
	}
	
	//inner class to represent a node in the tree
	public class TreeNode
	{
		private E data;
		private TreeNode left;
		private TreeNode right;
		private int repeats;
		private int height;

		//initializes inner class instance variables
		public TreeNode(E initValue, TreeNode leftroot, TreeNode rightroot)
		{
			data = initValue;
			left = leftroot;
			right = rightroot;
			repeats = 1;
			
			updateHeight(this);
		}
	}
}
